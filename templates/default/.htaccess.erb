<IfModule php5_module>
        <% if defined?(@app_name) %>
            php_value newrelic.appname "<%= @app_name%>"
        <% end %>
 </IfModule>
 
 <IfModule mod_geoip.c>
  GeoIPEnable On
</IfModule>

 # Use the front controller as index file. It serves as fallback solution when
 # every other rewrite/redirect fails (e.g. in an aliased environment without
 # mod_rewrite). Additionally, this reduces the matching process for the
 # startpage (path "/") because otherwise Apache will apply the rewritting rules
 # to each configured DirectoryIndex file (e.g. index.php, index.html, index.pl).
 
 <% if defined?(@app_file) %>
  DirectoryIndex <%= @app_file%>.php
 <% else %>
  DirectoryIndex app_dev.php
 <% end %>



<% if defined?(@directives) %>
    <% @directives.sort_by { |key, val| key }.each do |directive, value| -%>
    <%= "php_value #{directive} #{value}" %>
    <% end -%>
<% end %>

 <IfModule mod_rewrite.c>
     RewriteEngine On

     # Determine the RewriteBase automatically and set it as environment variable.
     # If you are using Apache aliases to do mass virtual hosting or installed the
     # project in a subdirectory, the base path will be prepended to allow proper
     # resolution of the app.php file and to redirect to the correct URI. It will
     # work in environments without path prefix as well, providing a safe, one-size
     # fits all solution. But as you do not need it in this case, you can comment
     # the following 2 lines to eliminate the overhead.
     RewriteCond %{REQUEST_URI}::$1 ^(/.+)/(.*)::\2$
     RewriteRule ^(.*) - [E=BASE:%1]

     # Redirect to URI without front controller to prevent duplicate content
     # (with and without `/app.php`). Only do this redirect on the initial
     # rewrite by Apache and not on subsequent cycles. Otherwise we would get an
     # endless redirect loop (request -> rewrite to front controller ->
     # redirect -> request -> ...).
     # So in case you get a "too many redirects" error or you always get redirected
     # to the startpage because your Apache does not expose the REDIRECT_STATUS
     # environment variable, you have 2 choices:
     # - disable this feature by commenting the following 2 lines or
     # - use Apache >= 2.3.9 and replace all L flags by END flags and remove the
     #   following RewriteCond (best solution)
     RewriteCond %{ENV:REDIRECT_STATUS} ^$
     
      <% if defined?(@app_file) %>
            RewriteRule ^<%= @app_file%>\.php(/(.*)|$) %{ENV:BASE}/$2 [R=301,L]
      <% else %>
            RewriteRule ^app_dev\.php(/(.*)|$) %{ENV:BASE}/$2 [R=301,L]
      <% end %>
     

     # If the requested filename exists, simply serve it.
     # We only want to let Apache serve files and not directories.
     RewriteCond %{REQUEST_FILENAME} -f
     RewriteRule .? - [L]

     # Rewrite all other queries to the front controller.
     <% if defined?(@app_file) %>
        RewriteRule .? %{ENV:BASE}/<%= @app_file%>.php [L]
     <% else %>
        RewriteRule .? %{ENV:BASE}/app_dev.php [L]
     <% end %>
 </IfModule>

 <IfModule !mod_rewrite.c>
     <IfModule mod_alias.c>
         # When mod_rewrite is not available, we instruct a temporary redirect of
         # the startpage to the front controller explicitly so that the website
         # and the generated links can still be used.
         <% if defined?(@app_file) %>
             RedirectMatch 302 ^/$ /<%= @app_file%>.php/
         <% else %>
             RedirectMatch 302 ^/$ /app_dev.php/
         <% end %>
         # RedirectTemp cannot be used instead
     </IfModule>
 </IfModule>